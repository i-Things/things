info(
    title: "自定义协议管理模块"
    desc: "自定义协议管理模块"
    author: "杨磊"
    email: "603685348@qq.com"
    version: "v1"
)


@server(
    group: things/protocol/info
    prefix: /api/v1/things/protocol/info
    accessCodePrefix: "thingsProtocolInfo"
    accessNamePrefix: "协议管理"
    accessGroup: "设备自定义"
    middleware:  CheckTokenWare,InitCtxsWare
)
service api {
    @doc(
        summary: "新增自定义协议"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler create
    post /create (ProtocolInfo) returns (WithID)
    @doc(
        summary: "更新自定义协议"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler update
    post /update (ProtocolInfo) returns ()
    @doc(
        summary: "删除自定义协议"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler delete
    post /delete (WithID) returns ()
    @doc(
        summary: "获取自定义协议信息列表"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler index
    post /index (ProtocolInfoIndexReq) returns (ProtocolInfoIndexResp)
    @doc(
        summary: "获取自定义协议详情"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler read
    post /read (WithIDOrCode) returns (ProtocolInfo)
}



@server(
    group: things/protocol/service
    prefix: /api/v1/things/protocol/service
    accessCodePrefix: "thingsProtocolInfo"
    accessNamePrefix: "协议管理"
    accessGroup: "设备自定义"
    middleware:  CheckTokenWare,InitCtxsWare
)
service api {
    @doc(
        summary: "删除自定义协议服务器"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler delete
    post /delete (WithID) returns ()
    @doc(
        summary: "获取自定义协议服务器信息列表"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler index
    post /index (ProtocolServiceIndexReq) returns (ProtocolServiceIndexResp)
}

@server(
    group: things/protocol/plugin
    prefix: /api/v1/things/protocol/plugin
    accessCodePrefix: "thingsProtocolPlugin"
    accessNamePrefix: "协议管理"
    accessGroup: "设备自定义"
    middleware:  CheckTokenWare,InitCtxsWare
)
service api {
    @doc(
        summary: "新增协议插件"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler create
    post /create (ProtocolPlugin) returns (WithIDStr)
    @doc(
        summary: "更新协议插件"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler update
    post /update (ProtocolPlugin) returns ()
    @doc(
        summary: "删除协议插件"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler delete
    post /delete (WithIDStr) returns ()
    @doc(
        summary: "获取协议插件列表"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler index
    post /index (ProtocolPluginIndexReq) returns (ProtocolPluginIndexResp)
    @doc(
        summary: "获取协议插件详情"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler read
    post /read (WithIDStr) returns (ProtocolPlugin)
    @doc(
        summary: "协议插件调试"
        authType: "admin"
        isNeedAuth: "true"
    )
    @handler debug
    post /debug (ProtocolPluginDebugReq) returns (ProtocolPluginDebugResp)
}

type (
    ProtocolPluginDebugReq{
        TriggerDir   int64 `json:"triggerDir"`    //1:up 2:down
        TriggerTimer   int64 `json:"triggerTimer"`  //收到前处理1:before 2:after
        Req   string `json:"req"`//请求
        Resp string  `json:"resp,optional"`
    }
    ProtocolPluginDebugResp{
        Out string `json:"out"`
        Logs []string `json:"logs"`
    }
    ProtocolPlugin  {
        ID            int64                  `json:"id,string,optional"`
        Name          string                 `json:"name,optional"`
        Desc          *string                 `json:"desc,optional"`
        TriggerSrc  int64 `json:"triggerSrc,optional"`    //product:1 device:2
        TriggerDir  int64 `json:"triggerDir,optional"`    //1:up 2:down
        TriggerTimer  int64 `json:"triggerTimer,optional"`  //收到前处理1:before 2:after
        TriggerHandle  string `json:"triggerHandle,optional"` //对应 mqtt topic的第一个 thing ota config 等等
        TriggerType  string `json:"triggerType,optional"`    // 操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
        Priority  int64 `json:"priority,optional"`//   执行优先级
        Script  string `json:"script,optional"`//脚本内容
        Status  int64 `json:"status,optional"`//状态:是否启用
        CreatedTime  int64 `json:"createdTime,optional"`//创建时间
    }


    ProtocolPluginIndexReq  {
        Page *PageInfo `json:"page,optional"`           //分页信息,只获取一个则不填
        Name string `json:"name,optional"` //
        TriggerSrc  int64 `json:"triggerSrc,optional"`    //product:1 device:2
        TriggerDir  int64 `json:"triggerDir,optional"`    //1:up 2:down
        TriggerTimer  int64 `json:"triggerTimer,optional"`  //收到前处理1:before 2:after
        TriggerHandle  string `json:"triggerHandle,optional"` //对应 mqtt topic的第一个 thing ota config 等等
        TriggerType  string `json:"triggerType,optional"`    // 操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
        BindProductID string `json:"bindProductID,optional"` //绑定该协议的产品
        BindDevice *DeviceCore `json:"bindDevice,optional"`  //绑定该协议的设备
    }

    ProtocolPluginIndexResp  {
        List []*ProtocolPlugin `json:"list"`    //自定义协议信息
        Total int64 `json:"total,optional"`  //拥有的总数
    }
)

type (
    ProtocolInfo  {
        ID            int64                  `json:"id,optional"`
        Name          string                 `json:"name,optional"`
        Code          string                 `json:"code,optional"`                   //  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
        Type          string                 `json:"type,optional"` //协议类型: 普通设备(默认):normal  音视频:media
        TransProtocol string                 `json:"transProtocol,optional"` // 传输协议: mqtt,tcp,udp
        Desc          string                 `json:"desc,optional"`
        Endpoints     []string               `json:"endpoints,optional"`
        EtcdKey       string                 `json:"etcdKey,optional"`
        ConfigFields  []*ProtocolConfigField `json:"configFields,optional"` //配置字段列表,没有可以不传
        ConfigInfos   []*ProtocolConfigInfo  `json:"configInfos,optional"`  //配置列表
        ProductFields  []*ProtocolConfigField `json:"productFields,optional"` //产品级的配置字段列表,没有可以不传
    }

     ProtocolConfigField  {
        ID         int64  `json:"id"`
        Group      string `json:"group"`
        Key        string `json:"key"`
        Label      string `json:"label"`
        IsRequired bool   `json:"isRequired"`
        Sort       int64  `json:"sort"`
    }

    ProtocolConfigInfo  {
        ID     int64             `json:"id"`
        Config map[string]string `json:"config"`
        Desc   string            `json:"desc"`
    }

    ProtocolInfoIndexReq  {
        Page *PageInfo `json:"page,optional"`           //分页信息,只获取一个则不填
        Name string `json:"name,optional"` //
        Code string `json:"code,optional"` //
        Codes []string `json:"codes,optional"`
        Type          string                 `json:"type,optional"` //协议类型: 普通设备(默认):normal  音视频:media
        TransProtocol string                 `json:"transProtocol,optional"` // 传输协议: mqtt,tcp,udp
    }

    ProtocolInfoIndexResp  {
        List []*ProtocolInfo `json:"list"`    //自定义协议信息
        Total int64 `json:"total,optional"`  //拥有的总数
    }
)
type (
    ProtocolService {
        ID  int64 `json:"id"`
        Code  string `json:"code"`//协议code
        IP  string `json:"ip"`// 协议服务的ip地址
        Port  int64 `json:"port"`//监听的端口,如果没有填0即可
        Status  int64 `json:"status"`//服务状态
        UpdatedTime  int64 `json:"updatedTime"`//更新时间
        CreatedTime  int64 `json:"createdTime"`//首次加入时间
    }
    ProtocolServiceIndexReq  {
        Page *PageInfo `json:"page,optional"`           //分页信息,只获取一个则不填
        Code string `json:"code"` //
    }
    ProtocolServiceIndexResp  {
        List []*ProtocolService `json:"list"`    //自定义协议信息
        Total int64 `json:"total,optional"`  //拥有的总数
    }
)